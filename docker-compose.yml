#  <author>Nasr Aldin</author>
#  <email>nasr2ldin@gmail.com</email>
#  <github>https://github.com/nasraldin/my-dev-containers</github>
#  <date>04/28/2021 01:03 AM</date>

# A Docker Compose must always start with the version tag.
# We use '3' because it's the last version.
version: "3.8"

# You should know that Docker Compose works with services.
# 1 service = 1 container.
# For example, a service, a server, a client, a database...
# We use the keyword 'services' to start to create services.
services:
  # nginx:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.nginx
  #   container_name: nginx
  #   # volumes:
  #   #   - .cert/https/dev.local.crt:/etc/ssl/certs/dev.local.crt:ro
  #   #   - .cert/https/dev.local.key:/etc/ssl/private/dev.local.key:ro
  #   restart: unless-stopped
  #   ports:
  #     - "8088:80"
  #     - "5002:443"
  #   networks:
  #     - gateway
  keycloak:
    image: jboss/keycloak
    container_name: keycloak
    restart: always
    environment:
      DB_VENDOR: mariadb
      DB_ADDR: mariadb
      DB_DATABASE: keycloak
      DB_USER: ${MARIADB_USERNAME}
      DB_PASSWORD: ${MARIADB_PASSWORD}
      KEYCLOAK_USER: ${USERNAME}
      KEYCLOAK_PASSWORD: ${PASSWORD}
      JGROUPS_DISCOVERY_PROTOCOL: JDBC_PING
    ports:
      - "8080:8080"
    depends_on:
      - mariadb
    networks:
      - gateway
  seq:
    image: datalust/seq:latest
    container_name: seq
    restart: always
    ports:
      - "5341:80"
    environment:
      - ACCEPT_EULA=Y
    volumes:
      - seq_data:/data
    networks:
      - gateway
  sqlserver:
    image: mcr.microsoft.com/mssql/server:latest
    container_name: sqlserver
    restart: always
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=$SQL_SERVER_PASSWORD
      - MSSQL_TCP_PORT=$MSSQL_TCP_PORT
      - MSSQL_PID=$MSSQL_PID
    ports:
      - "1433:1433"
    volumes:
      - mssql:/home/mssql
    networks:
      - gateway
  # mysql:
  #   image: mysql:latest
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=root
  #     - MYSQL_USER=nasr
  #     - MYSQL_PASSWORD=nasr
  #     - MYSQL_DATABASE=test
  #   volumes:
  #     - mysql:/var/lib/mysql
  mariadb:
    image: mariadb:latest
    container_name: mariadb
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./mysql/init:/docker-entrypoint-initdb.d
      - mariadb:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "--silent" ]
    networks:
      - gateway
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    depends_on:
      - mariadb
    environment:
      # - PMA_HOST=mariadb
      # - PMA_PORT=3306
      # - MYSQL_ROOT_PASSWORD=root
      - PMA_ARBITRARY=1
    restart: always
    ports:
      - 8002:80
    volumes:
      - phpmyadmin:/sessions
    networks:
      - gateway
  # cassandra:
  #   image: cassandra:latest
  #   container_name: cassandra
  #   hostname: cassandra
  #   healthcheck:
  #     test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 60
  #   restart: always
  #   ports:
  #     - "7199:7199" # JMX
  #     - "7000:7000" # cluster communication
  #     - "7001:7001" # cluster communication (SSL)
  #     - "9042:9042" # native protocol clients
  #     - "9160:9160" # thrift clients
  #   volumes:
  #     - cassandra_data:/var/lib/cassandra
  #   networks:
  #     - gateway
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB
    restart: always
    ports:
      - 5432:5432
    volumes:
      # In this example, we share the folder `db-data` in our root repository, with the default PostgreSQL data path.
      # It means that every time the repository is modifying the data inside
      # of `/var/lib/postgresql/data/`, automatically the change will appear in `db-data`.
      # You don't need to create the `db-data` folder. Docker Compose will do it for you.
      - pgdata:/var/lib/postgresql/data
    networks:
      - gateway
  pgadmin4:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    ports:
      - "8000:80"
    volumes:
      - pgadmin:/var/lib/pgadmin
    networks:
      - gateway
  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - 8005:8080
  #   environment:
  #     - ADMINER_DESIGN=arcs-material
  #     - ADMINER_PLUGINS=tables-filter tinymce
  couchdb:
    image: couchdb:latest
    container_name: couchdb
    restart: always
    ports:
      - "5984:5984"
    environment:
      COUCHDB_USER: ${COUCHDB_USER}
      COUCHDB_PASSWORD: ${COUCHDB_PASSWORD}
    volumes:
      - couchdb:/opt/couchdb/data
    networks:
      - gateway
  # couchbase:
  #   image: couchbase:latest
  #   container_name: couchbase
  #   restart: always
  #   deploy:
  #     replicas: 1
  #   ports:
  #     - 8091:8091
  #     # - 8092:8092
  #     # - 8093:8093
  #     - 8094:8094
  #     - 11210:11210
  #   volumes:
  #     - couchbase:/opt/couchbase/data
  #   networks:
  #     - gateway
  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - mongodb_configdb:/data/configdb
    networks:
      - gateway
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://$MONGODB_USERNAME:$MONGODB_PASSWORD@mongo:27017
    volumes:
      - mongo_express_data:/data/db
    networks:
      - gateway
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    environment:
      ALLOW_EMPTY_PASSWORD: ${ALLOW_EMPTY_PASSWORD}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - "redis_data:/data"
    networks:
      - gateway
  # redis-commander:
  #   container_name: redis-commander
  #   hostname: redis-commander
  #   image: rediscommander/redis-commander:latest
  #   restart: always
  #   environment:
  #     - REDIS_HOSTS=local:redis:6379
  #   ports:
  #     - "8003:8081"
  #   networks:
  #     - gateway
  camunda:
    build:
      context: .
      dockerfile: Dockerfile.camunda
    container_name: camunda
    restart: always
    ports:
      - "8009:8009"
      - "8008:8080"
    environment:
      - DB_DRIVER=org.mariadb.jdbc.Driver
      - DB_URL=jdbc:mariadb:sequential://mariadb:3306/camunda
      - DB_USERNAME=$MARIADB_USERNAME
      - DB_PASSWORD=$MARIADB_PASSWORD
      - WAIT_FOR=mariadb:3306
      - WAIT_FOR_TIMEOUT=10
    links:
      - mariadb
    networks:
      - gateway
  # camunda-workbench:
  #   image: camunda/camunda-bpm-workbench:latest
  #   container_name: camunda-workbench
  #   restart: always
  #   ports:
  #     - "8089:8080"
  #     - "8090:8090"
  #     - "9090:9090"
  rabbitmq:
    build:
      context: .
      dockerfile: Dockerfile.rabbitmq
    container_name: rabbitmq
    restart: always
    environment:
      - RABBITMQ_ERLANG_COOKIE=$RABBITMQ_ERLANG_COOKIE
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_logs:/var/log/rabbitmq/
      - rabbitmq_etc:/etc/rabbitmq/
    networks:
      - gateway
  sftp:
    build:
      context: .
      dockerfile: Dockerfile.sftp
    container_name: sftp
    restart: always
    volumes:
      - sftp_data:/home/uploads
    ports:
      - "2222:22"
    command: nasr:nasr:1001
    networks:
      - gateway
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: always
    ports:
      - "8888:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
    networks:
      - gateway
  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    restart: always
    hostname: sonarqube
    depends_on:
      - postgres
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - sonar.jdbc.url=jdbc:postgresql://postgres:5432/sonarqube
      - sonar.jdbc.username=$POSTGRES_USER
      - sonar.jdbc.password=$POSTGRES_PASSWORD
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - gateway
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

networks:
  gateway: {}

volumes:
  seq_data:
    driver: local
  mssql:
    driver: local
  mariadb:
    driver: local
  phpmyadmin:
    driver: local
  # cassandra_data:
  #   driver: local
  pgdata:
    driver: local
  pgadmin:
    driver: local
  couchdb:
    driver: local
  # couchbase:
  #   driver: local
  mongodb_data:
    driver: local
  mongodb_configdb:
    driver: local
  mongo_express_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  rabbitmq_logs:
    driver: local
  rabbitmq_etc:
    driver: local
  sftp_data:
    driver: local
  jenkins_home:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_logs:
    driver: local
  sonarqube_extensions:
    driver: local
